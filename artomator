#!/bin/bash

set -o errexit

# image (registry/image@sha:*** or ar/registry/image@sha:***)
IMAGE_SHA=$1
PROJECT_ID=$2
SIGN_KEY=$3

# check required input parameters
[ -z "$IMAGE_SHA" ] && echo "arg IMAGE_SHA not provided\n" && exit 1
[ -z "$PROJECT_ID" ] && echo "env var PROJECT_ID env var not set\n" && exit 1
[ -z "$SIGN_KEY" ] && echo "env var SIGN_KEY env var not set\n" && exit 1

# parse registry from image 
REGISTRY=$(echo $IMAGE_SHA | cut -d'/' -f 1)
SHA=$(echo $IMAGE_SHA | cut -d':' -f 2)

# print run variables 
echo "IMAGE_URI:  $IMAGE_SHA"
echo "PROJECT_ID: $PROJECT_ID"
echo "SIGN_KEY:   $SIGN_KEY"
echo "REGISTRY:   $REGISTRY"
echo "IMAGE_SHA:  $SHA"

# confgure gcloud 
gcloud auth configure-docker $REGISTRY --quiet
gcloud config set project $PROJECT_ID

mkdir -p "./$SHA"

# get image metadata
docker inspect $IMAGE_SHA > "${SHA}/meta.json"

# check if image has the sbom and vuln labels 
DO_SBOM=$(cat "${SHA}/meta.json" | jq -r -e '( .[0].Config.Labels."artomator-sbom" // "false" )')
DO_VULN=$(cat "${SHA}/meta.json" | jq -r -e '( .[0].Config.Labels."artomator-vuln" // "false" )')

echo "DO_SBOM: $DO_SBOM"
echo "DO_VULN: $DO_VULN"

# if neither set then exit
if [ "$DO_SBOM" != true ] && [ "$DO_VULN" != true ] ; then
    echo "SHA ${SHA} not labeled for either SBOM or vulnerability processing"
    exit 0
fi

# generate public key-pair from KMS if one does not exist 
if [ ! -f cosign.pub ]; then
    cosign generate-key-pair --kms $SIGN_KEY
fi

# Sign and verify image
cosign sign --key $SIGN_KEY $IMAGE_SHA
cosign verify --key $SIGN_KEY $IMAGE_SHA

# Generate SBOM from image and attach it as attestation to the image
if [ "$DO_SBOM" == true ] ; then
    echo "Processing SBOM for ${SHA}"
    syft packages -o spdx-json $IMAGE_SHA | jq --compact-output > $SHA/sbom.spdx.json
    cosign attest --predicate $SHA/sbom.spdx.json --type spdx --key $SIGN_KEY $IMAGE_SHA

    # Verifying SPDX document attestation 
    cosign verify-attestation --type=spdx --key $SIGN_KEY $IMAGE_SHA | jq -r .payload | base64 -d | jq -r .predicateType
fi

# Scan packages in SBOM for vulnerabilities and attach report as attestation to the image
if [ "$DO_VULN" == true ] ; then
    echo "Processing Vulnerabilities for ${SHA}"
    grype --add-cpes-if-none sbom:$SHA/sbom.spdx.json -o json | jq --compact-output > $SHA/sbom.vuln.json
    cosign attest --predicate $SHA/sbom.vuln.json --type vuln --key $SIGN_KEY $IMAGE_SHA

    # Verifying vulnerability report attestation 
    cosign verify-attestation --type=vuln --key $SIGN_KEY $IMAGE_SHA | jq -r .payload | base64 -d | jq -r .predicateType
fi
