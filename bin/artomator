#!/bin/bash

set -o errexit

# image (registry/image@sha:*** or ar/registry/image@sha:***)
IMAGE_SHA=$1
PROJECT_ID=$2
SIGN_KEY=$3
MSG_ID=$4

# check required input parameters
[ -z "$IMAGE_SHA" ] && echo "arg IMAGE_SHA not provided\n" && exit 1
[ -z "$PROJECT_ID" ] && echo "env var PROJECT_ID env var not set\n" && exit 1
[ -z "$SIGN_KEY" ] && echo "env var SIGN_KEY env var not set\n" && exit 1

# parse registry from image 
REGISTRY=$(echo $IMAGE_SHA | cut -d'/' -f 1)

# print run variables 
echo "$MSG_ID - PROJECT_ID: $PROJECT_ID"
echo "$MSG_ID - REGISTRY:   $REGISTRY"
echo "$MSG_ID - IMAGE_SHA:  $IMAGE_SHA"
echo "$MSG_ID - SIGN_KEY:   $SIGN_KEY"

# confgure gcloud 
gcloud auth configure-docker $REGISTRY --quiet
gcloud config set project $PROJECT_ID

# generate key-pair 
cosign generate-key-pair --kms $SIGN_KEY

# Sign and verify image
cosign sign --key $SIGN_KEY $IMAGE_SHA
cosign verify --key $SIGN_KEY $IMAGE_SHA

# Generate SBOM from image and attach it as attestation to the image
echo "$MSG_ID - Processing SBOM"
syft packages -o spdx-json $IMAGE_SHA | jq --compact-output > sbom.spdx.json
cosign attest --predicate sbom.spdx.json --type spdx --key $SIGN_KEY $IMAGE_SHA

# Verifying SPDX document attestation 
cosign verify-attestation --type=spdx  --key $SIGN_KEY $IMAGE_SHA | jq -r .payload | base64 -d | jq -r .predicateType

# Scan packages in SBOM for vulnerabilities and attach report as attestation to the image
echo "$MSG_ID - Processing Vulnerabilities"
grype --add-cpes-if-none sbom:sbom.spdx.json -o json | jq --compact-output > sbom.vuln.json
cosign attest --predicate sbom.vuln.json --type vuln --key $SIGN_KEY $IMAGE_SHA

# Verifying vulnerability report attestation 
echo "$MSG_ID - Verifying Attestation"
cosign verify-attestation --type=vuln --key $SIGN_KEY $IMAGE_SHA | jq -r .payload | base64 -d | jq -r .predicateType
