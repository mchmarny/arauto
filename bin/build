#!/bin/bash

DIR="$(dirname "$0")"
. "${DIR}/config"

set -o errexit
set -o pipefail

# generating key-pair
cosign generate-key-pair --kms $SIGN_KEY

# Build and push image
docker build -q --build-arg VERSION=$VERSION -t $IMAGE_URI --platform linux/amd64 .
docker push $IMAGE_URI

IMAGE_SHA=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE_URI)
echo "IMAGE_SHA: ${IMAGE_SHA}\n"

# Sign and verify image
cosign sign --key $SIGN_KEY -a version=$VERSION -a commit=$COMMIT $IMAGE_SHA
cosign verify --key $SIGN_KEY $IMAGE_SHA

# Generate SBOM from image and attach it as attestation to the image
syft -q packages -o spdx-json $IMAGE_SHA | jq --compact-output > sbom.json
cosign attest --predicate sbom.json --type spdx --key $SIGN_KEY $IMAGE_SHA
cosign verify-attestation --type=spdx  --key $SIGN_KEY $IMAGE_SHA | jq -r .payload | base64 -d | jq -r .predicateType

# Scan packages in SBOM for vulnerabilities and attach report as attestation to the image
grype -q --add-cpes-if-none sbom:sbom.json -o json | jq --compact-output > sbom.json
cosign attest --predicate sbom.json --type vuln --key $SIGN_KEY $IMAGE_SHA
cosign verify-attestation --type=vuln  --key $SIGN_KEY $IMAGE_SHA | jq -r .payload | base64 -d | jq -r .predicateType
