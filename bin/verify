#!/bin/bash

set -o errexit

PROJECT_ID=$1
SIGN_KEY=$2
IMAGE_DIGEST=$3 # image (registry/image@sha:*** or ar/registry/image@sha:***)
SBOM_FMT=$4 # spdx or cyclonedx
TARGET=$5 # target path for SBOM

# check required input parameters
[ -z "$IMAGE_DIGEST" ] && echo "arg IMAGE_DIGEST not set\n" && exit 1
[ -z "$PROJECT_ID" ] && echo "arg PROJECT_ID not set\n" && exit 1
[ -z "$SIGN_KEY" ] && echo "arg SIGN_KEY not set\n" && exit 1
[ -z "$SBOM_FMT" ] && echo "arg SBOM_FMT not set\n" && exit 1
[ -z "$TARGET" ] && echo "arg TARGET not set\n" && exit 1

# parse registry from image 
REGISTRY=$(echo $IMAGE_DIGEST | cut -d'/' -f 1)
IMG_SHA=$(echo $IMAGE_DIGEST | cut -d'@' -f 2)

# supported formats 
SBOM_CYCLON=cyclonedx
SBOM_SPDX=spdx

# print run variables 
echo "PROJECT:  $PROJECT_ID"
echo "KEY:      $SIGN_KEY"
echo "DIGEST:   $IMAGE_DIGEST"
echo "REGISTRY: $REGISTRY"
echo "SHA:      $IMG_SHA"
echo "SBOM:     $SBOM_FMT ($SBOM_CYCLON, $SBOM_SPDX)"
echo "TARGET:   $TARGET"

# confgure gcloud 
gcloud auth configure-docker $REGISTRY --quiet
gcloud config set project $PROJECT_ID


# if sbom format is not set to valid value then exit
if [ "$SBOM_FMT" != "$SBOM_CYCLON" ] && [ "$SBOM_FMT" != "$SBOM_SPDX" ] ; then
    echo "skipping: ${IMAGE_DIGEST} (null or unsuported SBOM format: '${SBOM_FMT}'"
    exit 1
fi

echo "start processing: ${IMAGE_DIGEST}"

# generate public key-pair from KMS if one does not exist 
if [ ! -f cosign.pub ]; then
    cosign generate-key-pair --kms $SIGN_KEY
fi

# verify SBOM
cosign verify-attestation \
    --type=$SBOM_FMT \
    --key $SIGN_KEY \
    --enforce-sct \
    --timeout 9m45s \
    $IMAGE_DIGEST | jq -r > $TARGET

echo "finished processing: ${IMAGE_DIGEST}"