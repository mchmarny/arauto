#!/bin/bash

DIR="$(dirname "$0")"
. "${DIR}/config"

set -o errexit
set -o pipefail

# configure defaults 
gcloud config set project $PROJECT_ID
gcloud config set artifacts/location $REGION
gcloud config set deploy/region $REGION

# enables APIs
gcloud services enable --quiet \
  artifactregistry.googleapis.com \
  binaryauthorization.googleapis.com \
  cloudkms.googleapis.com \
  cloudresourcemanager.googleapis.com \
  container.googleapis.com \
  containerregistry.googleapis.com \
  containerscanning.googleapis.com \
  run.googleapis.com \
  pubsub.googleapis.com

# key to sign images
gcloud kms keyrings create $ROOT_NAME \
  --project $PROJECT_ID \
  --location $REGION \
  --quiet

gcloud kms keys create $KEY_NAME \
  --project $PROJECT_ID \
  --location $REGION \
  --keyring $ROOT_NAME \
  --purpose asymmetric-signing \
  --default-algorithm rsa-sign-pkcs1-4096-sha512 \
  --quiet

gcloud kms keys describe $KEY_NAME \
  --project $PROJECT_ID \
  --location $REGION \
  --keyring $ROOT_NAME \
  --format json | jq --raw-output '.name'

# creates the Artifact Registry repo
gcloud artifacts repositories create $ROOT_NAME \
  --location $REGION \
  --repository-format=docker \
  --quiet

gcloud iam service-accounts create $SA_NAME \
  --display-name "Service invoker for ${SA_NAME}" \
  --quiet

# roles 
gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member "serviceAccount:${SA_EMAIL}" \
  --role roles/storage.objectCreator \
  --quiet

gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member "serviceAccount:${SA_EMAIL}" \
  --role roles/storage.objectViewer \
  --quiet

gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member "serviceAccount:${SA_EMAIL}" \
  --role roles/artifactregistry.writer \
  --quiet

gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member "serviceAccount:${SA_EMAIL}" \
  --role roles/cloudkms.viewer \
  --quiet

gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member "serviceAccount:${SA_EMAIL}" \
  --role roles/cloudkms.signerVerifier \
  --quiet


# redis 
gcloud redis instances create $ROOT_NAME --region $REGION

REDIS_IP=$(gcloud redis instances describe $ROOT_NAME \
     --region $REGION \
     --format="value(host)")

REDIS_PORT=$(gcloud redis instances describe $ROOT_NAME \
     --region $REGION \
     --format="value(port)")

echo "Redis: $REDIS_IP:$REDIS_PORT"

# vpc
gcloud compute networks vpc-access connectors create \
     "${ROOT_NAME}-connector" \
     --network default \
     --region $REGION \
     --range 10.10.0.0/28

# cloud run 
gcloud run deploy $ROOT_NAME \
	--no-allow-unauthenticated \
	--execution-environment=gen2 \
  --image $PUB_IMAGE_URI \
  --memory=2Gi \
	--max-instances=5 \
	--platform managed \
	--timeout 15m \
	--region $REGION \
  --vpc-connector "${ROOT_NAME}-connector" \
	--service-account $SA_EMAIL \
	--set-env-vars=PROJECT_ID=$PROJECT_ID,SIGN_KEY=$SIGN_KEY,REDIS_IP=$REDIS_IP,REDIS_PORT=$REDIS_PORT

gcloud run services add-iam-policy-binding $ROOT_NAME \
  --member "serviceAccount:${SA_EMAIL}" \
  --region $REGION \
  --role roles/run.invoker \
  --quiet

SERVICE_URL=$(gcloud run services describe $ROOT_NAME \
  --region $REGION --format="value(status.url)")

echo "Cloud Run Service: ${SERVICE_URL}"

# pubsub
gcloud pubsub topics create gcr --quiet

gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member "serviceAccount:service-${PROJECT_NUMBER}@gcp-sa-pubsub.iam.gserviceaccount.com" \
  --role roles/iam.serviceAccountTokenCreator \
  --quiet

gcloud pubsub subscriptions create gcr-sub \
  --topic gcr \
  --ack-deadline 600 \
  --push-endpoint "${SERVICE_URL}/" \
  --push-auth-service-account $SA_EMAIL \
  --quiet
  