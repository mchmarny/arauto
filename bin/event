#!/bin/bash

set -o errexit

PROJECT_ID=$1
SIGN_KEY=$2
IMAGE_DIGEST=$3 # image (registry/image@sha:*** or ar/registry/image@sha:***)
TARGET_DIR=$4 # full path to dir where to save results

# check required input parameters
[ -z "$IMAGE_DIGEST" ] && echo "arg IMAGE_DIGEST not set\n" && exit 1
[ -z "$PROJECT_ID" ] && echo "arg PROJECT_ID not set\n" && exit 1
[ -z "$SIGN_KEY" ] && echo "arg SIGN_KEY not set\n" && exit 1
[ -z "$TARGET_DIR" ] && echo "arg TARGET_DIR not set\n" && exit 1

# parse registry from image 
REGISTRY=$(echo $IMAGE_DIGEST | cut -d'/' -f 1)
IMG_SHA=$(echo $IMAGE_DIGEST | cut -d'@' -f 2)

# print run variables 
echo "
PROJECT:  $PROJECT_ID
KEY:      $SIGN_KEY
DIGEST:   $IMAGE_DIGEST
REGISTRY: $REGISTRY
SHA:      $IMG_SHA
TARGET:   $TARGET_DIR
"

# confgure gcloud 
gcloud auth configure-docker $REGISTRY --quiet
gcloud config set project $PROJECT_ID

# config digest
CONFIG_DIGEST=$(curl -s -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -H "Authorization: Bearer $(gcloud auth print-access-token)" "https://us-west1-docker.pkg.dev/v2/cloudy-demos/artomator/tester/manifests/${IMG_SHA}" | jq -r '.config.digest')

echo "CONFIG_DIGEST: $CONFIG_DIGEST"

curl -s -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
     -H "Authorization: Bearer $(gcloud auth print-access-token)" \
     "https://us-west1-docker.pkg.dev/v2/cloudy-demos/artomator/tester/blobs/${CONFIG_DIGEST}" > "${TARGET_DIR}/meta.json"

# check if image has the sbom and vuln labels 
DO_SBOM=$(cat "${TARGET_DIR}/meta.json" | jq -r -e '( .config.Labels."artomator-sbom" // "false" )')
DO_VULN=$(cat "${TARGET_DIR}/meta.json" | jq -r -e '( .config.Labels."artomator-vuln" // "false" )')

echo "
SBOM: $DO_SBOM
VULN: $DO_VULN
"

# generate public key-pair from KMS if one does not exist 
if [ ! -f cosign.pub ]; then
    cosign generate-key-pair --kms $SIGN_KEY
fi

# sign and verify image
cosign sign --key $SIGN_KEY $IMAGE_DIGEST
cosign verify --key $SIGN_KEY $IMAGE_DIGEST

# generate SBOM from image and attach it as attestation to the image
syft -q packages -o "${DO_SBOM}-json" $IMAGE_DIGEST | jq --compact-output > $TARGET_DIR/sbom.json
cosign attest --predicate $TARGET_DIR/sbom.json --type $DO_SBOM --key $SIGN_KEY $IMAGE_DIGEST

# scan packages in SBOM for vulnerabilities and attach report as attestation to the image
if [ "$DO_VULN" == true ] ; then
    trivy image $IMAGE_DIGEST -q --format json --timeout 10m --security-checks vuln | jq --compact-output > $TARGET_DIR/vuln.json
    cosign attest --predicate $TARGET_DIR/vuln.json --type vuln --key $SIGN_KEY $IMAGE_DIGEST
fi
