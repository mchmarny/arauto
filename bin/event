#!/bin/bash

set -o errexit

PROJECT_ID=$1
SIGN_KEY=$2
IMAGE_DIGEST=$3 # image (registry/image@sha:*** or ar/registry/image@sha:***)
TARGET_DIR=$4 # full path to dir where to save results

# check required input parameters
[ -z "$IMAGE_DIGEST" ] && echo "arg IMAGE_DIGEST not set\n" && exit 1
[ -z "$PROJECT_ID" ] && echo "arg PROJECT_ID not set\n" && exit 1
[ -z "$SIGN_KEY" ] && echo "arg SIGN_KEY not set\n" && exit 1
[ -z "$TARGET_DIR" ] && echo "arg TARGET_DIR not set\n" && exit 1

# parse registry from image 
REGISTRY=$(echo $IMAGE_DIGEST | cut -d'/' -f 1)
IMG_SHA=$(echo $IMAGE_DIGEST | cut -d'@' -f 2)

# create cosign key format 
# CO_KEY="gcpkms://${SIGN_KEY}"

# print run variables 
echo "
PROJECT:  $PROJECT_ID
KEY:      $SIGN_KEY
ATTESTOR: $ATTESTOR
DIGEST:   $IMAGE_DIGEST
REGISTRY: $REGISTRY
SHA:      $IMG_SHA
TARGET:   $TARGET_DIR
"

# confgure gcloud 
gcloud auth configure-docker $REGISTRY --quiet
gcloud config set project $PROJECT_ID

# get labels
trivy image \
    --security-checks vuln \
    --timeout 10m \
    --format json \
    --no-progress \
    --output $TARGET_DIR/vuln.json \
    $IMAGE_DIGEST

# check if image has the sbom and vuln labels 
DO_SBOM=$(cat $TARGET_DIR/vuln.json | \
    jq -r -e '( .Metadata.ImageConfig.config.Labels."artomator-sbom" // "false" )')

echo "SBOM: ${DO_SBOM}"

# exit if SBOM lable not set 
[ -z "$DO_SBOM" ] && echo "SBOM lable not found" && exit 0

# generate public key-pair from KMS if one does not exist 
if [ ! -f cosign.pub ]; then
    cosign generate-key-pair --kms $SIGN_KEY
fi

# sign and verify image
cosign sign --key $SIGN_KEY $IMAGE_DIGEST
cosign verify --key $SIGN_KEY $IMAGE_DIGEST

# generate SBOM from image and attach it as attestation to the image
syft -q packages \
    -o "${DO_SBOM}-json" $IMAGE_DIGEST | \
    jq --compact-output > $TARGET_DIR/sbom.json

# create attestation for the SBOM
cosign attest \
    --predicate $TARGET_DIR/sbom.json \
    --type $DO_SBOM \
    --key $SIGN_KEY \
    $IMAGE_DIGEST

# create biauthz attestation attestation
if [ ! -z "$ATTESTOR" ]
then
    gcloud beta container binauthz attestations sign-and-create \
        --attestor $ATTESTOR \
        --artifact-url $IMAGE_DIGEST \
        --keyversion $SIGN_KEY
fi


