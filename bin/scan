#!/bin/bash

set -o errexit

PROJECT_ID=$1
SIGN_KEY=$2
IMAGE_DIGEST=$3 # image (registry/image@sha:*** or ar/registry/image@sha:***)
VULN_SEVERITY=$4 # UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
TARGET=$5 # target path for report

# check required input parameters
[ -z "$IMAGE_DIGEST" ] && echo "arg IMAGE_DIGEST not set\n" && exit 1
[ -z "$PROJECT_ID" ] && echo "arg PROJECT_ID not set\n" && exit 1
[ -z "$SIGN_KEY" ] && echo "arg SIGN_KEY not set\n" && exit 1
[ -z "$VULN_SEVERITY" ] && echo "arg VULN_SEVERITY not set\n" && exit 1
[ -z "$TARGET" ] && echo "arg TARGET not set\n" && exit 1

# parse registry from image 
REGISTRY=$(echo $IMAGE_DIGEST | cut -d'/' -f 1)

# print run variables 
echo "DIGEST:   $IMAGE_DIGEST"
echo "PROJECT:  $PROJECT_ID"
echo "KEY:      $SIGN_KEY"
echo "REGISTRY: $REGISTRY"
echo "SEVERITY: $VULN_SEVERITY"
echo "TARGET:   $TARGET"

# confgure gcloud 
gcloud auth configure-docker $REGISTRY --quiet --no-user-output-enabled
gcloud config set project $PROJECT_ID --quiet --no-user-output-enabled

echo "start processing: ${IMAGE_DIGEST}"

# generate public key-pair from KMS if one does not exist 
if [ ! -f cosign.pub ]; then
    cosign generate-key-pair --kms $SIGN_KEY
fi

trivy image $IMAGE_DIGEST \
    --format json 
    --security-checks vuln \
    --timeout 10m \
    --severity $VULN_SEVERITY \
    jq --compact-output > $TARGET

echo "finished processing: $IMAGE_DIGEST"