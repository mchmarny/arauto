#!/bin/bash

set -o errexit

PROJECT_ID=$1
SIGN_KEY=$2
IMAGE_DIGEST=$3 # image (registry/image@sha:*** or ar/registry/image@sha:***)
MAX_SEVERITY=$4 # negligible low medium high critical
SCOPE=$5 # all-layers, squashed
CONTEXT=$6 # dir path

# check required input parameters
[ -z "$IMAGE_DIGEST" ] && echo "arg IMAGE_DIGEST not set\n" && exit 1
[ -z "$PROJECT_ID" ] && echo "arg PROJECT_ID not set\n" && exit 1
[ -z "$SIGN_KEY" ] && echo "arg SIGN_KEY not set\n" && exit 1
[ -z "$MAX_SEVERITY" ] && echo "arg MAX_SEVERITY not set\n" && exit 1
[ -z "$CONTEXT" ] && echo "arg CONTEXT not set\n" && exit 1
[ -z "$SCOPE" ] && SCOPE="squashed"

# parse registry from image 
REGISTRY=$(echo $IMAGE_DIGEST | cut -d'/' -f 1)

# print run variables 
echo "DIGEST:   $IMAGE_DIGEST"
echo "PROJECT:  $PROJECT_ID"
echo "KEY:      $SIGN_KEY"
echo "REGISTRY: $REGISTRY"
echo "CONTEXT:  $CONTEXT"
echo "SEVERITY: $MAX_SEVERITY"

# confgure gcloud 
gcloud auth configure-docker $REGISTRY --quiet
gcloud config set project $PROJECT_ID

echo "start processing: ${IMAGE_DIGEST}"

# generate public key-pair from KMS if one does not exist 
if [ ! -f cosign.pub ]; then
    cosign generate-key-pair --kms $SIGN_KEY
fi

# verify image
cosign verify --key $SIGN_KEY $IMAGE_DIGEST

grype -q --only-notfixed --scope $SCOPE --fail-on $MAX_SEVERITY $IMAGE_DIGEST

echo "finished processing: $IMAGE_DIGEST"