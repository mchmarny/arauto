name: sign

on:
  workflow_call:
    inputs:
      registry:
        description: 'Artifact Registry URI'
        required: true
        type: string
      id_provider:
        description: 'OIDC provider'
        required: true
        type: string
      service_account:
        description: 'Email of the service account'
        required: true
        type: string
      key:
        required: true
        description: 'KMS key path'
        type: string
      digest:
        description: 'Fully qualified URI of the image with its digest'
        required: true
        type: string
      cosign_version:
        description: 'Version of Cosign to use for signing'
        default: v1.13.1
        required: false
        type: string
      vuln_severity_cutoff:
        description: 'Minimum vulnerability severity to trigger a failure'
        default: medium
        required: false
        type: string

jobs:

  sign:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      security-events: write
    steps:
    
    - name: Input Digest
      run: |
        echo "${{ inputs.digest }}"
    
    - id: auth
      name: Get GCP token
      uses: google-github-actions/auth@v1
      with:
          token_format: "access_token"
          workload_identity_provider: ${{ inputs.id_provider }}
          service_account: ${{ inputs.service_account }}

    - name: Scan Image
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: image
        security-checks: vuln
        image-ref: ${{ inputs.digest }}
        format: sarif
        output: trivy-results.sarif
        hide-progress: true
        timeout: '10m'
        exit-code: '1'
        severity: 'CRITICAL'
      env:
        GOOGLE_APPLICATION_CREDENTIAL: ${{ steps.auth.outputs.access_token }}

    - name: Upload Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results.sarif
        category: trivy-report


    - name: Install Cosign
      uses: sigstore/cosign-installer@main
      with:
        cosign-release: ${{ inputs.cosign_version }}
    
    - name: Auth Cosign
      run: |
        cosign version
        cosign login ${{ inputs.registry }} --username=oauth2accesstoken --password=${{ steps.auth.outputs.access_token }}
    
    - name: Get KMS Key
      run: |
        cosign generate-key-pair --kms ${{ inputs.key }}
    
    - name: Sign Image
      run: |
        cosign sign --force --key ${{ inputs.key }} ${{ inputs.digest }}
      env:
        COSIGN_PASSWORD: ${{ steps.auth.outputs.access_token }}

    - name: Gen SBOM
      run: |
        syft -q packages -o spdx-json ${{ inputs.digest }} | jq --compact-output > sbom.spdx
      env:
        COSIGN_PASSWORD: ${{ steps.auth.outputs.access_token }}

    - name: Create Attestation
      run: |
        cosign attest --predicate sbom.spdx --type spdx --key ${{ inputs.key }} ${{ inputs.digest }}
      env:
        COSIGN_PASSWORD: ${{ steps.auth.outputs.access_token }}
      
    - name: Verify Image
      run: |
        cosign verify-attestation --type spdx-json --key ${{ inputs.key }} ${{ inputs.digest }}
      env:
        COSIGN_PASSWORD: ${{ steps.auth.outputs.access_token }}

    