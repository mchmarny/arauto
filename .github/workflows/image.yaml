name: image

on:
  workflow_call:
    inputs:
      go_version:
        description: 'Go version to use'
        type: string
        required: true
      registry:
        description: 'Artifact Registry URI'
        required: true
        type: string
      id_provider:
        description: 'OIDC provider'
        required: true
        type: string
      service_account:
        description: 'Email of the service account'
        required: true
        type: string
      image:
        description: 'Image URI without the label or sha'
        required: true
        type: string
      max_vuln_severity:
        description: 'Maximum vulnerability severity to allow'
        type: string
        required: true
    outputs:
      digest:
        description: "Digest of the published image"
        value: ${{ jobs.image.outputs.digest }}

jobs:

  image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      security-events: write
    outputs:
      digest: ${{ steps.image.outputs.digest }}
    steps:

    - name: Print Inputs
      run: |
        echo "${{ inputs.image }}"

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ inputs.go_version }}
    
    - run: go version
    
    - name: Cache Modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Checkout Code
      uses: actions/checkout@v3
    
    - name: Tidy Modules
      run: |
        go mod tidy
        go mod vendor
    
    - name: Capture Variables
      run: |
        echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    
    - id: auth
      name: Get GCP token
      uses: google-github-actions/auth@v1
      with:
          token_format: "access_token"
          workload_identity_provider: ${{ inputs.id_provider }}
          service_account: ${{ inputs.service_account }}
    
    - name: Define Metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ inputs.image }}
        tags: |
          type=raw,enable=true,value=${{ env.RELEASE_VERSION }}
          type=raw,enable=true,value=${{ env.GITHUB_SHA }}
    
    - name: Registry Auth
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.registry }}
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}
    
    - name: Image Push
      id: push
      uses: docker/build-push-action@v4
      with:
        file: deployment/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Export Digest
      id: digest
      run: |
        echo "IMAGE_DIGEST=${{ inputs.image }}@${{ steps.push.outputs.digest }}" >> $GITHUB_ENV

    - name: Scan Image
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: image
        image-ref: ${{ env.IMAGE_DIGEST }}
        vuln-type: 'os,library'
        format: sarif
        output: trivy-results.sarif
        hide-progress: true
        timeout: '10m'
        exit-code: '1'
        severity: "${{ inputs.max_vuln_severity }}"
      env:
        GOOGLE_APPLICATION_CREDENTIAL: ${{ steps.auth.outputs.access_token }}

    - name: Upload Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results.sarif

    - name: Gen SBOM
      run: |
        syft login ${{ inputs.registry }} \
          -u oauth2accesstoken \
          -p ${{ steps.auth.outputs.access_token }}
        syft -q packages \
          -o spdx-json  | \
          jq --compact-output > sbom.spdx

    - name: Upload SBOM
      env: 
        DIGEST_TAG: "$(echo ${{ steps.push.outputs.digest }} | tr : -)"
      run: |
        cosign upload blob \
          -f sbom.spdx \
          -a sha=${{ github.sha }} \
          -a run_id=${{ github.run_id }} \
          -a run_attempt=${{ github.run_attempt }} \
          -a version=${{ env.RELEASE_VERSION }} \
          "${{ inputs.image }}:${DIGEST_TAG}.sbom"

    - name: Export Digest
      id: image
      run: |
        echo "digest=${{ env.IMAGE_DIGEST }}" >> $GITHUB_OUTPUT
